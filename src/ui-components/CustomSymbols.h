#pragma  once

struct CustomSymbols
{
    constexpr static const unsigned char sinePathData[] = {
        110, 109, 246, 151, 197, 63, 162, 255, 31, 65, 98, 126, 0, 156,
        64,
        123, 247, 255, 191, 127, 77, 3, 65, 71, 3, 0, 192, 250, 237, 69,
        65,
        162, 255, 31, 65, 98, 69, 71, 132, 65, 0, 0, 176, 65, 250, 237,
        158,
        65, 0, 0, 176, 65, 123, 148, 185, 65, 162, 255, 31, 65, 101, 0,
        0
    };

    constexpr static unsigned char squarePathData[] = {
        110, 109, 0, 0, 184, 65, 0, 0, 152, 65, 108, 0, 0, 184, 65, 0,
        0, 128, 63, 108, 0, 0, 64, 65, 0, 0, 128, 63, 108, 0, 0, 64, 65,
        0, 0, 152, 65, 108, 0, 0, 128, 63, 0, 0, 152, 65, 108, 0, 0,
        128, 63, 0, 0, 128, 63, 101, 0, 0
    };

    constexpr static unsigned char trianglePathData[] = {
        110, 109, 157, 157, 184, 63, 151, 255, 47, 65, 108, 40, 15,
        206, 64, 0, 0, 0, 64, 108, 165, 78, 68, 65, 151, 255, 47, 65,
        108, 245, 202, 144, 65, 0, 0, 160, 65, 108, 5, 197, 184, 65,
        151, 255, 47, 65, 101, 0, 0
    };

    constexpr static unsigned char sawToothFWPathData[] = {
        110, 109, 0, 0, 128, 63, 0, 0, 168, 65, 108, 0, 0, 184, 65, 0,
        0, 64, 64, 108, 0, 0, 184, 65, 0, 0, 168, 65, 101, 0, 0
    };

    constexpr static unsigned char infinitePathData[] = {
        110, 109, 57, 180, 104, 65, 0, 0, 128, 63, 98, 44, 130, 27, 65, 0, 0, 128, 63, 83, 121, 13, 65, 246, 255, 31,
        65, 162, 151, 142, 64, 246, 255, 31, 65, 98, 137, 35, 143, 61, 246, 255, 31, 65, 185, 197, 188, 190, 0, 0, 128,
        63, 183, 151, 142, 64, 0, 0, 128, 63, 98, 233, 125, 20, 65, 0, 0, 128, 63, 194, 134, 34, 65, 246, 255,
        31, 65, 57, 180, 104, 65, 246, 255, 31, 65, 98, 216, 112, 151, 65, 246, 255, 31, 65, 25, 243, 154, 65, 0, 0,
        128, 63, 57, 180, 104, 65, 0, 0, 128, 63, 99, 101, 0, 0
    };

    static std::unique_ptr<juce::Path> createPathFromData(const unsigned char* data, size_t dataSize)
    {
        std::unique_ptr<juce::Path> path = std::make_unique<juce::Path>();
        path->loadPathFromData(data, dataSize);
        return std::move(path);
    }
};
